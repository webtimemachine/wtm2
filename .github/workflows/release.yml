on:
  push:
    tags:
      - 'v*'

name: Create Release and Upload Release Assets

jobs:
  build:
    name: Create Release and Upload Release Assets
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        working-directory: app
        run: npm install

      - name: Build Chrome Extension app
        run: npm run app:build:chrome

      - name: Create ZIP file for Chrome extension
        run: |
          zip -r chrome-extension.zip ./app_chrome

      - name: Build iOS app from Chrome code
        run: npm run app:build:ios

      - name: Copy ExportOptions.plist file
        run: cp app/ExportOptions.plist app_safari/wtm

      - name: Update xcode project file
        run: |
          sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = com.ttt246llc.wtm;/PRODUCT_BUNDLE_IDENTIFIER = com.ttt246llc.wtm;\nPROVISIONING_PROFILE_SPECIFIER = "Web Time Machine Prov Profile Dev";/' app_safari/wtm/wtm.xcodeproj/project.pbxproj
          sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = com.ttt246llc.wtm.Extension;/PRODUCT_BUNDLE_IDENTIFIER = com.ttt246llc.wtm.Extension;\nPROVISIONING_PROFILE_SPECIFIER = "Web Time Machine Prov Profile Dev Extension";/' app_safari/wtm/wtm.xcodeproj/project.pbxproj

      - name: Install dependencies & build backend project
        working-directory: backend
        run: |
          npm install
          npm run build
          zip -r backend.zip ./dist

      - name: Install Dependencies
        run: brew install coreutils

      - name: Decode and Install Apple Provisioning Profiles and Certificate
        run: |
          echo "${{ secrets.ENCODED_CERTIFICATE }}" | base64 --decode --output cert.p12
          echo "${{ secrets.ENCODED_PROVISIONING_PROFILE_APP }}" | base64 --decode --output app.mobileprovision
          echo "${{ secrets.ENCODED_PROVISIONING_PROFILE_EXTENSION }}" | base64 --decode --output extension.mobileprovision

          KEYCHAIN_PATH=$RUNNER_TEMP/my_temporary.keychain
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security import cert.p12 -P "${{ secrets.P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychains -d user -s $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp app.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          cp extension.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        env:
          ENCODED_CERTIFICATE: ${{ secrets.ENCODED_CERTIFICATE }}
          ENCODED_PROVISIONING_PROFILE_APP: ${{ secrets.ENCODED_PROVISIONING_PROFILE_APP }}
          ENCODED_PROVISIONING_PROFILE_EXTENSION: ${{ secrets.ENCODED_PROVISIONING_PROFILE_EXTENSION }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}

      - name: List all schemes
        working-directory: 'app_safari/wtm'
        run: xcodebuild -list

      - name: Build Safari Extension for Testing
        working-directory: 'app_safari/wtm'
        run: |
          xcodebuild build-for-testing -scheme "wtm (iOS)" -sdk iphonesimulator -derivedDataPath './build' -allowProvisioningUpdates

      - name: Archive the iOS App
        working-directory: 'app_safari/wtm'
        run: |
          xcodebuild archive -scheme "wtm (iOS)" -sdk iphoneos -configuration AppStoreDistribution DEVELOPMENT_TEAM=2858MX5336 CODE_SIGN_STYLE=Manual -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.4' archive -archivePath "$PWD/build/Web Time Machine.xcarchive" -allowProvisioningUpdates

      - name: Export the .ipa File
        working-directory: 'app_safari/wtm'
        run: |
          xcodebuild -exportArchive -archivePath "$PWD/build/Web Time Machine.xcarchive" -exportOptionsPlist "$PWD/ExportOptions.plist" DEVELOPMENT_TEAM=2858MX5336 -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.4' -exportPath "$PWD/build"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Web Time Machine Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Chrome extension Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: chrome-extension.zip
          asset_name: chrome-extension.zip
          asset_content_type: application/zip

      - name: Upload Release Backend Asset
        id: upload-release-asset-backend
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: backend/backend.zip
          asset_name: backend.zip
          asset_content_type: application/zip

      - name: Upload .ipa to Release
        id: upload-release-asset-ipa
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: 'app_safari/wtm/build/wtm.ipa'
          asset_name: wtm.ipa
          asset_content_type: application/octet-stream

      - name: 'Publish to Chrome Store'
        uses: cardinalby/webext-buildtools-chrome-webstore-publish-action@v1
        with:
          action: 'publish'
          apiClientId: ${{ secrets.CHROME_CLIENT_ID }}
          apiClientSecret: ${{ secrets.CHROME_SECRET }}
          apiRefreshToken: ${{ secrets.CHROME_REFRESH_TOKEN }}
          extensionId: ${{ secrets.CHROME_EXTENSION_ID }}
          zip_file: 'chrome-extension.zip'
