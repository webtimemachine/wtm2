on:
  push:
    tags:
      - 'v*'

name: Create Release and Upload Release Assets

jobs:
  build_extensions:
    name: Build Chrome and Firefox Extensions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install TurboRepo and dependencies
        run: |
          npm install turbo --global
          npm install

      - name: Run turbo build for extensions
        run: turbo run build --filter=@wtm/extension...

      - name: Create ZIP files for Chrome and Firefox
        run: |
          (cd ./build/app_chrome && zip -r ../../chrome-extension.zip .)
          (cd ./build/app_firefox && zip -r ../../firefox-extension.zip .)

      - name: Upload Chrome artifact
        uses: actions/upload-artifact@v3
        with:
          name: chrome-build-zip
          path: chrome-extension.zip

      - name: Upload ExportOptions artifact
        uses: actions/upload-artifact@v3
        with:
          name: export-options-file
          path: apps/extension/ExportOptions.plist

      - name: Upload Firefox artifact
        uses: actions/upload-artifact@v3
        with:
          name: firefox-build-zip
          path: firefox-extension.zip

      - name: Upload Chrome Extension to Store
        uses: mnao305/chrome-extension-upload@v5.0.0
        with:
          file-path: chrome-extension.zip
          extension-id: ${{ secrets.CHROME_EXTENSION_ID }}
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_SECRET }}
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}

      - name: Upload Firefox Extension to Store
        uses: trmcnvn/firefox-addon@v1
        with:
          uuid: '{5790cffd-a2b7-4cb6-ad05-c5b955ddee3e}'
          xpi: firefox-extension.zip
          manifest: ./build/app_firefox/manifest.json
          api-key: ${{ secrets.FIREFOX_JWT_ISSUER }}
          api-secret: ${{ secrets.FIREFOX_JWT_SECRET }}

  build_backend:
    name: Build Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          npm install turbo --global
          npm install

      - name: Run turbo build for backend
        run: turbo run build --filter=@wtm/backend

      - name: Zip backend build
        run: (cd ./build/backend && zip -r ../../backend.zip .)

      - name: Upload Backend artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-build-zip
          path: backend.zip

  build_ios:
    name: Build and Upload iOS App
    runs-on: macos-latest
    needs: build_extensions
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          brew install coreutils
          npm install turbo --global
          npm install

      - name: Update xcode project file
        run: |
          sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = com.ttt246llc.wtm;/PRODUCT_BUNDLE_IDENTIFIER = com.ttt246llc.wtm;\nPROVISIONING_PROFILE_SPECIFIER = "Web Time Machine Prov Profile Prod";/' ./native/app_ios/wtm/wtm.xcodeproj/project.pbxproj
          sed -i '' 's/PRODUCT_BUNDLE_IDENTIFIER = com.ttt246llc.wtm.Extension;/PRODUCT_BUNDLE_IDENTIFIER = com.ttt246llc.wtm.Extension;\nPROVISIONING_PROFILE_SPECIFIER = "Web Time Machine Prov Profile Prod Extension";/' ./native/app_ios/wtm/wtm.xcodeproj/project.pbxproj

      - name: Decode and Install Apple Provisioning Profiles and Certificate
        run: |
          echo "${{ secrets.ENCODED_CERTIFICATE }}" | base64 --decode --output cert.p12
          echo "${{ secrets.ENCODED_PROVISIONING_PROFILE_APP }}" | base64 --decode --output app.mobileprovision
          echo "${{ secrets.ENCODED_PROVISIONING_PROFILE_EXTENSION }}" | base64 --decode --output extension.mobileprovision

          KEYCHAIN_PATH=$RUNNER_TEMP/my_temporary.keychain
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security import cert.p12 -P "${{ secrets.P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychains -d user -s $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp app.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          cp extension.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Download Chrome artifact
        uses: actions/download-artifact@v3
        with:
          name: chrome-build-zip
          path: 'native/'

      - name: Unzip Chrome artifact
        working-directory: 'native'
        run: |
          unzip chrome-extension.zip -d app_chrome
          rm chrome-extension.zip

      - name: Download ExportOptions artifact
        uses: actions/download-artifact@v3
        with:
          name: export-options-file
          path: 'native/app_ios/wtm/'

      - name: Build and archive iOS app
        working-directory: 'native/app_ios/wtm'
        run: |
          xcodebuild archive -project "wtm.xcodeproj" -scheme "wtm (iOS)" -archivePath "$PWD/build/Web Time Machine.xcarchive" -configuration Release CODE_SIGN_STYLE=Manual

      - name: Export the .ipa File
        working-directory: 'native/app_ios/wtm'
        run: |
          xcodebuild -exportArchive -archivePath "$PWD/build/Web Time Machine.xcarchive" -exportOptionsPlist "$PWD/ExportOptions.plist" -exportPath "$PWD/build"

      - name: Upload iOS artifact
        uses: actions/upload-artifact@v3
        with:
          name: webtm-ipa
          path: native/app_ios/wtm/build/wtm.ipa

      - name: Upload to TestFlight
        env:
          API_KEY_BASE64: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        run: |
          echo -n "$API_KEY_BASE64" | base64 --decode -o "./AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8"
          xcrun altool --validate-app -f build/wtm.ipa -t ios --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}
          xcrun altool --upload-app -f build/wtm.ipa -t ios --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}

  release:
    name: Create GitHub Release and Upload Assets
    needs: [build_extensions, build_backend, build_ios]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Chrome artifact
        uses: actions/download-artifact@v3
        with:
          name: chrome-build-zip
          path: .

      - name: Download Firefox artifact
        uses: actions/download-artifact@v3
        with:
          name: firefox-build-zip
          path: .

      - name: Download Backend artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-build-zip
          path: .

      - name: Download iOS artifact
        uses: actions/download-artifact@v3
        with:
          name: webtm-ipa
          path: .

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Web Time Machine Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Chrome Extension Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: chrome-extension.zip
          asset_name: chrome-extension.zip
          asset_content_type: application/zip

      - name: Upload Firefox Extension Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: firefox-extension.zip
          asset_name: firefox-extension.zip
          asset_content_type: application/zip

      - name: Upload Backend Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: backend.zip
          asset_name: backend.zip
          asset_content_type: application/zip

      - name: Upload iOS IPA Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: 'wtm.ipa'
          asset_name: wtm.ipa
          asset_content_type: application/octet-stream
