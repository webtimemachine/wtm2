// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

enum UserType {
  MEMBER
  ADMIN
}

model User {
  id               BigInt    @id @default(autoincrement())
  userType         UserType
  email            String    @unique @db.VarChar()
  displayname      String?   @db.VarChar()
  passChangedAt    DateTime? @db.Timestamptz(0)
  password         String?   @db.VarChar()
  recoveryCode     String?   @db.VarChar()
  verified         Boolean   @default(false)
  verificationCode String?   @db.VarChar()
  createdAt        DateTime  @default(now()) @db.Timestamptz(0)

  userPreferences   UserPreferences?
  userDevices       UserDevice[]
  navigationEntries NavigationEntry[]

  updateAt  DateTime? @updatedAt @db.Timestamptz(0)
  deletedAt DateTime? @db.Timestamptz(0)

  @@map("users")
}

model UserPreferences {
  id BigInt @id @default(autoincrement())

  userId BigInt @unique()
  user   User   @relation(fields: [userId], references: [id])

  enableNavigationEntryExpiration Boolean  @default(false)
  navigationEntryExpirationInDays Int?
  enableImageEncoding             Boolean? @default(false)
  enableExplicitContentFilter     Boolean? @default(true)
  enableStopTracking              Boolean @default(false)

  createdAt DateTime  @default(now()) @db.Timestamptz(0)
  updateAt  DateTime? @updatedAt @db.Timestamptz(0)

  @@map("user_preferences")
}

model Device {
  id BigInt @id @default(autoincrement())

  deviceKey     String  @unique @db.VarChar()
  userAgent     String? @db.VarChar()
  userAgentData String? @db.VarChar()

  createdAt DateTime  @default(now()) @db.Timestamptz(0)
  updateAt  DateTime? @updatedAt @db.Timestamptz(0)

  userDevices UserDevice[]

  @@map("device")
}

model UserDevice {
  id BigInt @id @default(autoincrement())

  deviceAlias String? @db.VarChar()

  userId BigInt
  user   User   @relation(fields: [userId], references: [id])

  deviceId BigInt
  device   Device @relation(fields: [deviceId], references: [id])

  session           Session?
  navigationEntries NavigationEntry[]

  createdAt DateTime  @default(now()) @db.Timestamptz(0)
  updateAt  DateTime? @updatedAt @db.Timestamptz(0)

  @@unique([userId, deviceId])
  @@map("user_device")
}

model Session {
  id           BigInt @id @default(autoincrement())
  refreshToken String @db.VarChar()

  userDeviceId BigInt     @unique
  userDevice   UserDevice @relation(fields: [userDeviceId], references: [id])

  expiration DateTime? @db.Timestamptz(0)

  createdAt DateTime  @default(now()) @db.Timestamptz(0)
  updateAt  DateTime? @updatedAt @db.Timestamptz(0)

  @@map("session")
}

model NavigationEntry {
  id       BigInt  @id @default(autoincrement())
  url      String  @db.VarChar()
  title    String  @db.VarChar()
  liteMode Boolean @default(false)

  userId BigInt
  user   User   @relation(fields: [userId], references: [id])

  navigationDate DateTime @default(now()) @db.Timestamptz(0)

  userDeviceId BigInt
  userDevice   UserDevice @relation(fields: [userDeviceId], references: [id])

  createdAt DateTime               @default(now()) @db.Timestamptz(0)
  updateAt  DateTime?              @updatedAt @db.Timestamptz(0)
  queries   NavigationEntryQuery[]

  @@map("navigation_entry")
}

model NavigationEntryQuery {
  id                BigInt          @id @default(autoincrement())
  navigationEntryId BigInt
  queryId           BigInt
  navigationEntry   NavigationEntry @relation(fields: [navigationEntryId], references: [id], onDelete: Cascade)
  query             Query           @relation(fields: [queryId], references: [id], onDelete: Cascade)

  @@unique([navigationEntryId, queryId], name: "unique_navigation_query")
  @@map("navigation_entry_query")
}

model Query {
  id                BigInt                 @id @default(autoincrement())
  query             String                 @unique @db.VarChar()
  createdAt         DateTime               @default(now()) @db.Timestamptz(0)
  navigationEntries NavigationEntryQuery[]

  @@map("query")
}

model BlackList {
  id        BigInt   @id @default(autoincrement())
  url       String   @db.VarChar()
  flaggedAt DateTime @default(now()) @db.Timestamptz(0)

  @@map("black_list")
}
